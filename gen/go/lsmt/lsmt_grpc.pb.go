// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: lsmt/lsmt.proto

package lsmtv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LSMT_Get_FullMethodName = "/keyValueDB.LSMT/Get"
	LSMT_Put_FullMethodName = "/keyValueDB.LSMT/Put"
)

// LSMTClient is the client API for LSMT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LSMTClient interface {
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error)
	Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRes, error)
}

type lSMTClient struct {
	cc grpc.ClientConnInterface
}

func NewLSMTClient(cc grpc.ClientConnInterface) LSMTClient {
	return &lSMTClient{cc}
}

func (c *lSMTClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRes)
	err := c.cc.Invoke(ctx, LSMT_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lSMTClient) Put(ctx context.Context, in *PutReq, opts ...grpc.CallOption) (*PutRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutRes)
	err := c.cc.Invoke(ctx, LSMT_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LSMTServer is the server API for LSMT service.
// All implementations must embed UnimplementedLSMTServer
// for forward compatibility.
type LSMTServer interface {
	Get(context.Context, *GetReq) (*GetRes, error)
	Put(context.Context, *PutReq) (*PutRes, error)
	mustEmbedUnimplementedLSMTServer()
}

// UnimplementedLSMTServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLSMTServer struct{}

func (UnimplementedLSMTServer) Get(context.Context, *GetReq) (*GetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedLSMTServer) Put(context.Context, *PutReq) (*PutRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedLSMTServer) mustEmbedUnimplementedLSMTServer() {}
func (UnimplementedLSMTServer) testEmbeddedByValue()              {}

// UnsafeLSMTServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LSMTServer will
// result in compilation errors.
type UnsafeLSMTServer interface {
	mustEmbedUnimplementedLSMTServer()
}

func RegisterLSMTServer(s grpc.ServiceRegistrar, srv LSMTServer) {
	// If the following call pancis, it indicates UnimplementedLSMTServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LSMT_ServiceDesc, srv)
}

func _LSMT_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSMTServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LSMT_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSMTServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LSMT_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LSMTServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LSMT_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LSMTServer).Put(ctx, req.(*PutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// LSMT_ServiceDesc is the grpc.ServiceDesc for LSMT service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LSMT_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keyValueDB.LSMT",
	HandlerType: (*LSMTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _LSMT_Get_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _LSMT_Put_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lsmt/lsmt.proto",
}
